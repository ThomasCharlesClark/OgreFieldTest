compositor_node TestComputeNode
{
	in 0 renderTarget
	in 1 velocityTexture
	in 2 inkTexture
	in 3 pressureTexture
	in 4 divergenceTexture
	in_buffer 0 inputUavBuffer

	//texture divergenceTexture		target_width target_height 1 PFG_RGBA32_FLOAT uav 3d depth_pool 0
	//texture pressureTexture			target_width target_height 1 PFG_RGBA32_FLOAT uav 3d depth_pool 0 
	texture vorticityTexture		target_width target_height 1 PFG_R32_FLOAT	  uav 3d depth_pool 0

	buffer temporaryBuffer 1 4 target_width target_height
	
	target
	{
		pass compute
		{
			job	AddImpulses
			uav_buffer 0 inputUavBuffer read
			uav 1 velocityTexture write
			uav 2 inkTexture write
		}

		pass compute
		{
			job Advection
			uav 0 velocityTexture write
			uav 1 inkTexture write
		}
		
		pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}
		
		/*pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}

		pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}

		pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}

		pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}

		pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}

		pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}

		pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}

		pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}

		pass compute
		{
			job JacobiDiffusion
			uav 0 velocityTexture read write
		}*/
		
		pass compute
		{
			job Divergence
			uav 0 divergenceTexture write
			input 0 velocityTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}

		pass compute
		{
			job BoundaryConditions
			uav 0 velocityTexture read write
			uav 1 pressureTexture read write
			uav 2 inkTexture read write
		}

		pass compute
		{
			job SubtractPressureGradient
			uav 0 velocityTexture write
			input 0 pressureTexture read
		}
		
		/*pass compute
		{
			job VorticityComputation
			input 0 velocityTexture read
			uav 0 vorticityTexture write
		}
		
		pass compute 
		{
			job VorticityConfinement
			input 0 vorticityTexture read
			uav 0 velocityTexture write
		}*/
		
		pass compute
		{
			job	Render
			uav_buffer 0 temporaryBuffer write
			uav 1 velocityTexture read write
			uav 2 inkTexture read write
			uav 3 pressureTexture read write
			uav 4 vorticityTexture read write
		}
		
		pass compute
		{
			job ClearBuffers
			uav_buffer 0 inputUavBuffer write
			uav 1 inkTexture write
			uav 2 velocityTexture write
			uav 3 divergenceTexture write
			uav 4 pressureTexture write
		}
	}

	target vorticityTexture 
	{
		pass clear 
		{
			colour_value 0 0 0 1
		}
	}

	target renderTarget 
	{
		pass clear
		{
			colour_value 0.2 0.4 0.6 1
		}

		//The bindings made by pass bind_uav PERSIST even after we're out of renderTarget.
		pass bind_uav
		{
			starting_slot 1
			uav_buffer 0 temporaryBuffer read
			uav_buffer 1 inputUavBuffer read
		}

		//Compositor will issue the appropiate barriers because
		//it knows testTexture will be used as a texture.
		pass render_quad
		{
			material DrawFromUavBuffer
			uses_uav 0 read
		}

		pass bind_uav
		{
		}
	}
}

workspace "Test Compute Workspace"
{
	connect_buffer_external 0 TestComputeNode 0
	connect_external 1 TestComputeNode 1
	connect_external 2 TestComputeNode 2
	connect_external 3 TestComputeNode 3
	connect_external 4 TestComputeNode 4

	connect_output TestComputeNode 0
}