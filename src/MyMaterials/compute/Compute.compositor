compositor_node TestComputeNode
{
	in 0 renderTarget
	in 1 velocityTexture
	in_buffer 0 inputUavBuffer

	//texture velocityTexture			target_width target_height 1 PFG_RGBA32_FLOAT	uav keep_content 3d depth_pool 0 
	texture velocityFinal			target_width target_height 1 PFG_RGBA32_FLOAT	uav keep_content 3d depth_pool 0 
	texture inkTexture				target_width target_height 1 PFG_RGBA32_FLOAT	uav keep_content 3d depth_pool 0  
	texture inkTextureFinal			target_width target_height 1 PFG_RGBA32_FLOAT	uav keep_content 3d depth_pool 0 
	texture divergenceTexture		target_width target_height 1 PFG_RGBA32_FLOAT	uav keep_content 3d depth_pool 0 
	texture pressureTexture			target_width target_height 1 PFG_RGBA32_FLOAT	uav keep_content 3d depth_pool 0 
	texture vortTex					target_width target_height 1 PFG_R32_FLOAT		uav 3d depth_pool 0

	texture tempInkTexture target_width target_height 1 PFG_R32_FLOAT uav 3d depth_pool 0

	//buffer <buffer_name> <num_elements> <bytes_per_element> [target_width] [target_width_scaled] [target_height] [target_height_scaled]
	buffer temporaryBuffer 1 4 target_width target_height
	
	texture nullDummy target_width target_height PFG_NULL
	
	/*
		So... what HAVE we got, and WHY.

		WHY have we got TWO textures for Velocity?!
		WHY have we got TWO textures for Ink?!

		BECAUSE we need to be able to write to them in compute shaders, but also to Sample them.


		HOW can we see if Velocity is doing what we think it ought to?

		MAP the velocity texture back to the CPU - arrows displaying direction and magnitude?
		
	target
	{
		pass compute 
		{
			job AdvectionCopy
			uav 0 velocityTexture write
			input 0 velocityFinal read
		}

		pass compute 
		{
			job AdvectionCopy
			uav 0 inkTexture write
			input 0 inkTextureFinal read
		}
	}

	*/
	

	target
	{
		
		pass compute
		{
			job	AddImpulses
			uav_buffer 0 inputUavBuffer read
			uav 1 velocityTexture write
			uav 2 inkTexture write
			uav 3 tempInkTexture write
			
			/* Must preserve state from previous frame */
			input 0 velocityFinal read
			input 1 inkTextureFinal read
		}

		pass compute
		{
			job VelocityAdvection
			input 0 velocityTexture read
			uav 0 velocityFinal write
		}
		
		pass compute
		{
			job	InkAdvection
			uav 0 inkTextureFinal write
			input 0 velocityFinal read
			input 1 inkTexture read
		}

		pass compute
		{
			job Divergence
			uav 0 divergenceTexture write
			input 0 velocityTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}
		
		pass compute
		{
			job JacobiPressure
			uav 0 pressureTexture write
			input 0 divergenceTexture read
		}

		pass compute
		{
			job BoundaryConditions
			uav 0 velocityFinal read write
			uav 1 pressureTexture read write
			uav 2 inkTexture read write
		}

		pass compute
		{
			job SubtractPressureGradient
			uav 0 velocityFinal write
			input 0 pressureTexture read
		}

		/*pass compute
		{
			job VorticityComputation
			input 0 velocityFinal read
			uav 0 vortTex write
		}

		pass compute 
		{
			job VorticityConfinement
			input 0 vortTex read
			uav 0 velocityFinal write
		}*/

		/*pass compute
		{
			job ClearBuffers1
			uav_buffer 0 inputUavBuffer write
			uav 1 inkTexture write
		}*/
		
		pass compute
		{
			job	TestJob
			uav_buffer 0 temporaryBuffer write
			uav 1 velocityFinal read
			uav 2 velocityTexture read
			uav 3 tempInkTexture read
			uav 4 vortTex read
			uav 5 pressureTexture read
			input 0 inkTextureFinal read
		}
		
		pass compute
		{
			job ClearBuffers2
			uav_buffer 0 inputUavBuffer write
			uav 1 inkTexture write
			uav 2 inkTextureFinal write
			uav 3 velocityFinal write
			uav 4 velocityTexture write
		}
	}

	target vortTex 
	{
		pass clear 
		{
			colour_value 0 0 0 1
		}
	}


	/*
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	



	
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	*/

	target renderTarget 
	{
		pass clear
		{
			colour_value 0.2 0.4 0.6 1
		}

		//The bindings made by pass bind_uav PERSIST even after we're out of renderTarget.
		pass bind_uav
		{
			starting_slot 1
			uav_buffer 0 temporaryBuffer read
			uav_buffer 1 inputUavBuffer read
		}

		//Compositor will issue the appropiate barriers because
		//it knows testTexture will be used as a texture.
		pass render_quad
		{
			material DrawFromUavBuffer
			uses_uav 0 read
		}

		pass bind_uav
		{
		}
	}
}

workspace "Test Compute Workspace"
{
	connect_buffer_external 0 TestComputeNode 0
	connect_external 1 TestComputeNode 1

	connect_output TestComputeNode 0
}












	/*target inkTexture
	{
		pass bind_uav
		{
			starting_slot 1
			uav 0 inkTextureFinal read
		}

		pass render_quad
		{
			material CopyFromTexture
			uses_uav 0 read
		}

		pass bind_uav 
		{

		}
	}

	target velocityTexture
	{
		pass bind_uav
		{
			starting_slot 1
			uav 0 velocityFinal read
		}

		pass render_quad
		{
			material CopyFromTexture
			uses_uav 0 read
		}

		pass bind_uav 
		{

		}
	}*/
