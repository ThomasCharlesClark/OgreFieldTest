
compositor_node TestComputeNode
{
	in 0 velocityTexture
	in_buffer 0 inputUavBuffer

	//buffer name size bytesPerElement [target_width] [target_height] bind_flags
	//texture leapMotionTexture target_width target_height PFG_RGBA8_UNORM depth_pool 0 uav

	buffer temporaryBuffer 1 4 target_width target_height

	target
	{
		pass compute
		{
			job	TestJob
			
			//input 0 mrtTexture 1
			//uav_buffer # bufferName offset_start size read write allow_write_after_write

			//uav_buffer 0 testBuffer write
			uav_buffer 0 temporaryBuffer write
			uav_buffer 1 inputUavBuffer read
		}
	}

	target velocityTexture
	{
		pass clear
		{
			colour_value 0.2 0.4 0.6 1
		}

		//The bindings made by pass bind_uav PERSIST even after we're out of velocityTexture.
		pass bind_uav
		{
			starting_slot 1
			//uav_buffer 0 testBuffer	read
			uav_buffer 0 temporaryBuffer read
			uav_buffer 1 inputUavBuffer read
		}

		//Compositor will issue the appropiate barriers because
		//it knows testTexture will be used as a texture.
		pass render_quad
		{
			material DrawFromUavBuffer
			uses_uav 0 read
		}

		pass bind_uav
		{
		}
	}

	out 0 velocityTexture
	out_buffer 0 inputUavBuffer
}

workspace "Test Compute Workspace"
{
	connect_buffer_external 0 TestComputeNode 0
	connect_output TestComputeNode 0
}