compositor_node TestComputeNode
{
	in 0 renderTarget
	in 1 velocityTexture
	in 2 previousVelocityTexture
	in 3 pressureTexture
	in 4 pressureGradientTexture
	in 5 divergenceTexture
	in 6 inkTexture
	in 7 previousInkTexture

	in_buffer 0 inputUavBuffer

	//buffer name size bytesPerElement [target_width] [target_height] bind_flags

	texture leapMotionTexture target_width target_height PFG_RGBA32_FLOAT uav depth_pool 0 keep_content

	texture tempInkTexture target_width target_height 2 PFG_R32_FLOAT uav 3d depth_pool 0 keep_content

	buffer temporaryBuffer 1 4 target_width target_height
	
	texture nullDummy target_width target_height PFG_NULL

	target
	{
		pass compute
		{
			job	AddImpulses
			uav_buffer 2 inputUavBuffer read
			uav 3 tempInkTexture write
		}

		pass compute
		{
			job AdvectionCopy 
		}
		
		pass compute
		{
			job VelocityAdvection
		}
		
		pass compute
		{
			job Divergence
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}

		// MOAR PRETTY
		/*
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		
		pass compute
		{
			job JacobiPressure
		}
		*/
		
		pass compute
		{
			job SubtractPressureGradient
		}
		
		pass compute
		{
			job ClearBuffers1
			uav_buffer 0 inputUavBuffer write
		}

		pass compute
		{
			job	InkAdvection
			uav 2 tempInkTexture read write
		}

		pass compute
		{
			job	TestJob
			uav_buffer 0 temporaryBuffer write
			uav 3 tempInkTexture read
		}
	}
	
		/*

		pass compute
		{
			job ClearBuffers2
		}*/
	target renderTarget 
	{
		pass clear
		{
			colour_value 0.2 0.4 0.6 1
		}

		//The bindings made by pass bind_uav PERSIST even after we're out of renderTarget.
		pass bind_uav
		{
			starting_slot 1
			uav_buffer 0 temporaryBuffer read
			uav_buffer 1 inputUavBuffer read
		}

		//Compositor will issue the appropiate barriers because
		//it knows testTexture will be used as a texture.
		pass render_quad
		{
			material DrawFromUavBuffer
			uses_uav 0 read
		}

		pass bind_uav
		{
		}
	}
}

workspace "Test Compute Workspace"
{
	connect_buffer_external 0 TestComputeNode 0

	/*

	connect_buffer_external 0 ImpulsesNode 0
	connect_external 1 ImpulsesNode 0
	connect_external 6 ImpulsesNode 1

	connect ImpulsesNode 0 1 TestComputeNode 1 6
	*/
	
	/*
	connect_external 0 TestComputeNode 0
	connect_external 1 TestComputeNode 1
	connect_external 2 TestComputeNode 2
	connect_external 3 TestComputeNode 3
	connect_external 4 TestComputeNode 4
	connect_external 5 TestComputeNode 5
	connect_external 6 TestComputeNode 6
	connect_external 7 TestComputeNode 7
	*/

	connect_output TestComputeNode 0
	connect_output TestComputeNode 1
	connect_output TestComputeNode 2
	connect_output TestComputeNode 3
	connect_output TestComputeNode 4
	connect_output TestComputeNode 5
	connect_output TestComputeNode 6
	connect_output TestComputeNode 7
}